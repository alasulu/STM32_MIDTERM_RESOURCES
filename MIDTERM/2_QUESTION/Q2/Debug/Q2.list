
Q2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000170  08000150  08000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c0  080002c8  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c0  080002c0  000012c8  2**0
                  CONTENTS
  4 .ARM          00000000  080002c0  080002c0  000012c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c0  080002c8  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c0  080002c0  000012c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002c4  080002c4  000012c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002c8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002c8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001df  00000000  00000000  000012f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c9  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000015a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002c  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001808e  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005ab  00000000  00000000  000196a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000806c1  00000000  00000000  00019c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a30e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  0009a354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0009a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	@ (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	080002a8 	.word	0x080002a8

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	@ (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	080002a8 	.word	0x080002a8

08000190 <main>:
#include "stm32f107xx.h"


int main(void){
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1U << 3);
 8000194:	4b1b      	ldr	r3, [pc, #108]	@ (8000204 <main+0x74>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a1a      	ldr	r2, [pc, #104]	@ (8000204 <main+0x74>)
 800019a:	f043 0308 	orr.w	r3, r3, #8
 800019e:	6193      	str	r3, [r2, #24]

	GPIOB->CRL &= ~(0xF << 20);
 80001a0:	4b19      	ldr	r3, [pc, #100]	@ (8000208 <main+0x78>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a18      	ldr	r2, [pc, #96]	@ (8000208 <main+0x78>)
 80001a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001aa:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (1U << 21);
 80001ac:	4b16      	ldr	r3, [pc, #88]	@ (8000208 <main+0x78>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a15      	ldr	r2, [pc, #84]	@ (8000208 <main+0x78>)
 80001b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001b6:	6013      	str	r3, [r2, #0]

	GPIOB->CRL &=~(0xF << 12);
 80001b8:	4b13      	ldr	r3, [pc, #76]	@ (8000208 <main+0x78>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a12      	ldr	r2, [pc, #72]	@ (8000208 <main+0x78>)
 80001be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80001c2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (1U << 15);
 80001c4:	4b10      	ldr	r3, [pc, #64]	@ (8000208 <main+0x78>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000208 <main+0x78>)
 80001ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80001ce:	6013      	str	r3, [r2, #0]

	while(1){

	if(GPIOB->IDR & (1U << 3)){
 80001d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000208 <main+0x78>)
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	f003 0308 	and.w	r3, r3, #8
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d005      	beq.n	80001e8 <main+0x58>
		GPIOB->ODR |= (1U << 5);
 80001dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000208 <main+0x78>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a09      	ldr	r2, [pc, #36]	@ (8000208 <main+0x78>)
 80001e2:	f043 0320 	orr.w	r3, r3, #32
 80001e6:	60d3      	str	r3, [r2, #12]

	}
	if(!(GPIOB->IDR & (1U << 3))){
 80001e8:	4b07      	ldr	r3, [pc, #28]	@ (8000208 <main+0x78>)
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	f003 0308 	and.w	r3, r3, #8
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d1ed      	bne.n	80001d0 <main+0x40>
		GPIOB->ODR &= ~(1U << 5);
 80001f4:	4b04      	ldr	r3, [pc, #16]	@ (8000208 <main+0x78>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	4a03      	ldr	r2, [pc, #12]	@ (8000208 <main+0x78>)
 80001fa:	f023 0320 	bic.w	r3, r3, #32
 80001fe:	60d3      	str	r3, [r2, #12]
	if(GPIOB->IDR & (1U << 3)){
 8000200:	e7e6      	b.n	80001d0 <main+0x40>
 8000202:	bf00      	nop
 8000204:	40021000 	.word	0x40021000
 8000208:	40010c00 	.word	0x40010c00

0800020c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800020c:	480d      	ldr	r0, [pc, #52]	@ (8000244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800020e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000210:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000214:	480c      	ldr	r0, [pc, #48]	@ (8000248 <LoopForever+0x6>)
  ldr r1, =_edata
 8000216:	490d      	ldr	r1, [pc, #52]	@ (800024c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000218:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <LoopForever+0xe>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800021c:	e002      	b.n	8000224 <LoopCopyDataInit>

0800021e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800021e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000222:	3304      	adds	r3, #4

08000224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000228:	d3f9      	bcc.n	800021e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022a:	4a0a      	ldr	r2, [pc, #40]	@ (8000254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800022c:	4c0a      	ldr	r4, [pc, #40]	@ (8000258 <LoopForever+0x16>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000230:	e001      	b.n	8000236 <LoopFillZerobss>

08000232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000234:	3204      	adds	r2, #4

08000236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000238:	d3fb      	bcc.n	8000232 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023a:	f000 f811 	bl	8000260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800023e:	f7ff ffa7 	bl	8000190 <main>

08000242 <LoopForever>:

LoopForever:
  b LoopForever
 8000242:	e7fe      	b.n	8000242 <LoopForever>
  ldr   r0, =_estack
 8000244:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800024c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000250:	080002c8 	.word	0x080002c8
  ldr r2, =_sbss
 8000254:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000258:	2000001c 	.word	0x2000001c

0800025c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800025c:	e7fe      	b.n	800025c <ADC1_2_IRQHandler>
	...

08000260 <__libc_init_array>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	2600      	movs	r6, #0
 8000264:	4d0c      	ldr	r5, [pc, #48]	@ (8000298 <__libc_init_array+0x38>)
 8000266:	4c0d      	ldr	r4, [pc, #52]	@ (800029c <__libc_init_array+0x3c>)
 8000268:	1b64      	subs	r4, r4, r5
 800026a:	10a4      	asrs	r4, r4, #2
 800026c:	42a6      	cmp	r6, r4
 800026e:	d109      	bne.n	8000284 <__libc_init_array+0x24>
 8000270:	f000 f81a 	bl	80002a8 <_init>
 8000274:	2600      	movs	r6, #0
 8000276:	4d0a      	ldr	r5, [pc, #40]	@ (80002a0 <__libc_init_array+0x40>)
 8000278:	4c0a      	ldr	r4, [pc, #40]	@ (80002a4 <__libc_init_array+0x44>)
 800027a:	1b64      	subs	r4, r4, r5
 800027c:	10a4      	asrs	r4, r4, #2
 800027e:	42a6      	cmp	r6, r4
 8000280:	d105      	bne.n	800028e <__libc_init_array+0x2e>
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f855 3b04 	ldr.w	r3, [r5], #4
 8000288:	4798      	blx	r3
 800028a:	3601      	adds	r6, #1
 800028c:	e7ee      	b.n	800026c <__libc_init_array+0xc>
 800028e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000292:	4798      	blx	r3
 8000294:	3601      	adds	r6, #1
 8000296:	e7f2      	b.n	800027e <__libc_init_array+0x1e>
 8000298:	080002c0 	.word	0x080002c0
 800029c:	080002c0 	.word	0x080002c0
 80002a0:	080002c0 	.word	0x080002c0
 80002a4:	080002c4 	.word	0x080002c4

080002a8 <_init>:
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	bf00      	nop
 80002ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	469e      	mov	lr, r3
 80002b2:	4770      	bx	lr

080002b4 <_fini>:
 80002b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b6:	bf00      	nop
 80002b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ba:	bc08      	pop	{r3}
 80002bc:	469e      	mov	lr, r3
 80002be:	4770      	bx	lr
