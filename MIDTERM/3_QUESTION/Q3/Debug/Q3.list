
Q3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000150  08000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003d4  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  000013d4  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  000013d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003d4  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d0  080003d0  000013d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080003d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008ea  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001fa  00000000  00000000  00001ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000050  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c57  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007f9  00000000  00000000  0001ac07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084627  00000000  00000000  0001b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009fa27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000012c  00000000  00000000  0009fa6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0009fb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	@ (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	080003b4 	.word	0x080003b4

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	@ (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	080003b4 	.word	0x080003b4

08000190 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	f003 021f 	and.w	r2, r3, #31
 80001a0:	4906      	ldr	r1, [pc, #24]	@ (80001bc <NVIC_EnableIRQ+0x2c>)
 80001a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a6:	095b      	lsrs	r3, r3, #5
 80001a8:	2001      	movs	r0, #1
 80001aa:	fa00 f202 	lsl.w	r2, r0, r2
 80001ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	e000e100 	.word	0xe000e100

080001c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	6039      	str	r1, [r7, #0]
 80001ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80001cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	da0b      	bge.n	80001ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	490c      	ldr	r1, [pc, #48]	@ (800020c <NVIC_SetPriority+0x4c>)
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 030f 	and.w	r3, r3, #15
 80001e0:	3b04      	subs	r3, #4
 80001e2:	0112      	lsls	r2, r2, #4
 80001e4:	b2d2      	uxtb	r2, r2
 80001e6:	440b      	add	r3, r1
 80001e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ea:	e009      	b.n	8000200 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <NVIC_SetPriority+0x50>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	0112      	lsls	r2, r2, #4
 80001f8:	b2d2      	uxtb	r2, r2
 80001fa:	440b      	add	r3, r1
 80001fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000ed00 	.word	0xe000ed00
 8000210:	e000e100 	.word	0xe000e100

08000214 <main>:

volatile uint32_t ms_ticks = 0;           // Millisecond counter
volatile uint32_t last_interrupt_time = 0; // Last interrupt time in ms


int main(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	// Initialize the clock to use PLL as the system clock

	//initClockHSI()

	// RCC Configuration for PORTA
	RCC->APB2ENR |= GPIOAEN;
 8000218:	4b19      	ldr	r3, [pc, #100]	@ (8000280 <main+0x6c>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a18      	ldr	r2, [pc, #96]	@ (8000280 <main+0x6c>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6193      	str	r3, [r2, #24]

	//Set PA2 as input pin
	GPIOA->CRL &= ~(0xF<<8);
 8000224:	4b17      	ldr	r3, [pc, #92]	@ (8000284 <main+0x70>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a16      	ldr	r2, [pc, #88]	@ (8000284 <main+0x70>)
 800022a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x2<<10); // 10: Input with pull-up / pull-down
 8000230:	4b14      	ldr	r3, [pc, #80]	@ (8000284 <main+0x70>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a13      	ldr	r2, [pc, #76]	@ (8000284 <main+0x70>)
 8000236:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800023a:	6013      	str	r3, [r2, #0]

	// Enable the AFIO clock
	RCC->APB2ENR |= AFIOEN;
 800023c:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <main+0x6c>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a0f      	ldr	r2, [pc, #60]	@ (8000280 <main+0x6c>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6193      	str	r3, [r2, #24]

	// Connect EXTI2 to GPIOA pin 2 (EXTI0 cannot be connected to GPIOA pin 2)
	AFIO->EXTICR[0] &= ~(0xF<<8); //0000: PA[x] pin
 8000248:	4b0f      	ldr	r3, [pc, #60]	@ (8000288 <main+0x74>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a0e      	ldr	r2, [pc, #56]	@ (8000288 <main+0x74>)
 800024e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000252:	6093      	str	r3, [r2, #8]

	// Configure EXTI0
	EXTI->RTSR |= (1U<<0); /* Then we would have to decide whether we want to
 8000254:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <main+0x78>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	4a0c      	ldr	r2, [pc, #48]	@ (800028c <main+0x78>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6093      	str	r3, [r2, #8]
	interrupt to be triggered by rising edge or falling edge. Over here we will
	use falling edge trigger */

	// Disable the Mask on EXTI0
	EXTI->IMR |= (1U<<0); //Unmask EXTI0//
 8000260:	4b0a      	ldr	r3, [pc, #40]	@ (800028c <main+0x78>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a09      	ldr	r2, [pc, #36]	@ (800028c <main+0x78>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]

	 // Set the priority (adjust this value based on your needs)
	 NVIC_SetPriority(EXTI2_IRQn, 6);
 800026c:	2106      	movs	r1, #6
 800026e:	2008      	movs	r0, #8
 8000270:	f7ff ffa6 	bl	80001c0 <NVIC_SetPriority>
	 // Enable EXTI0 IRQ in NVIC
	 NVIC_EnableIRQ(EXTI2_IRQn);
 8000274:	2008      	movs	r0, #8
 8000276:	f7ff ff8b 	bl	8000190 <NVIC_EnableIRQ>

	 // Infinite Loop
	     while (1) {
 800027a:	bf00      	nop
 800027c:	e7fd      	b.n	800027a <main+0x66>
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	40010800 	.word	0x40010800
 8000288:	40010000 	.word	0x40010000
 800028c:	40010400 	.word	0x40010400

08000290 <SysTick_Handler>:
    SysTick->VAL = 0;
    SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk;
}

// SysTick handler to increment the ms_ticks counter
void SysTick_Handler(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    ms_ticks++;
 8000294:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <SysTick_Handler+0x18>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	4a03      	ldr	r2, [pc, #12]	@ (80002a8 <SysTick_Handler+0x18>)
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	2000001c 	.word	0x2000001c

080002ac <exti0_callback>:

// Callback for EXTI0 interrupt (LED ON)
static void exti0_callback(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
    GPIOC->BSRR |= LEDC13; // Turn LED ON
 80002b0:	4b04      	ldr	r3, [pc, #16]	@ (80002c4 <exti0_callback+0x18>)
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	4a03      	ldr	r2, [pc, #12]	@ (80002c4 <exti0_callback+0x18>)
 80002b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ba:	6113      	str	r3, [r2, #16]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40011000 	.word	0x40011000

080002c8 <EXTI0_IRQHandler>:

// EXTI0 interrupt handler
void EXTI0_IRQHandler(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
    if ((EXTI->PR & LINE0) != 0) { // Check if interrupt is from line 0
 80002ce:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <EXTI0_IRQHandler+0x44>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d014      	beq.n	8000304 <EXTI0_IRQHandler+0x3c>
        uint32_t current_time = ms_ticks;
 80002da:	4b0d      	ldr	r3, [pc, #52]	@ (8000310 <EXTI0_IRQHandler+0x48>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	607b      	str	r3, [r7, #4]
        // 1: selected trigger request occurred
        if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 80002e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <EXTI0_IRQHandler+0x4c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	1ad3      	subs	r3, r2, r3
 80002e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002ec:	d90a      	bls.n	8000304 <EXTI0_IRQHandler+0x3c>
            last_interrupt_time = current_time; //Debouncing mechanism
 80002ee:	4a09      	ldr	r2, [pc, #36]	@ (8000314 <EXTI0_IRQHandler+0x4c>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6013      	str	r3, [r2, #0]
            EXTI->PR |= LINE0; // Clear pending interrupt flag
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <EXTI0_IRQHandler+0x44>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <EXTI0_IRQHandler+0x44>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6153      	str	r3, [r2, #20]
            exti0_callback();  // Call callback function
 8000300:	f7ff ffd4 	bl	80002ac <exti0_callback>
        }
    }
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40010400 	.word	0x40010400
 8000310:	2000001c 	.word	0x2000001c
 8000314:	20000020 	.word	0x20000020

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	@ (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	@ (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ff63 	bl	8000214 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	20000024 	.word	0x20000024

08000368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC1_2_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	2600      	movs	r6, #0
 8000370:	4d0c      	ldr	r5, [pc, #48]	@ (80003a4 <__libc_init_array+0x38>)
 8000372:	4c0d      	ldr	r4, [pc, #52]	@ (80003a8 <__libc_init_array+0x3c>)
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	10a4      	asrs	r4, r4, #2
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	f000 f81a 	bl	80003b4 <_init>
 8000380:	2600      	movs	r6, #0
 8000382:	4d0a      	ldr	r5, [pc, #40]	@ (80003ac <__libc_init_array+0x40>)
 8000384:	4c0a      	ldr	r4, [pc, #40]	@ (80003b0 <__libc_init_array+0x44>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	3601      	adds	r6, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	4798      	blx	r3
 80003a0:	3601      	adds	r6, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
