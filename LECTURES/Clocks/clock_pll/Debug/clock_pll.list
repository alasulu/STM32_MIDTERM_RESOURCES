
clock_pll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000150  08000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  0800042c  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  0000142c  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  0000142c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  0800042c  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000428  08000428  00001428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000142c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800042c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800042c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000235  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000110  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000017a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017604  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000079d  00000000  00000000  00018e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080764  00000000  00000000  000195ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099d53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e0  00000000  00000000  00099d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00099e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	@ (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	0800040c 	.word	0x0800040c

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	@ (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	0800040c 	.word	0x0800040c

08000190 <main>:
void delay(uint32_t time);
void initClockPLL(void);
void initClockHSE(void);

int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	// Initialize the clock to use PLL as the system clock
	initClockHSI();
 8000194:	f000 f8c4 	bl	8000320 <initClockHSI>

	// RCC Configure for Port A and Port D
	RCC->APB2ENR |= GPIOAEN;
 8000198:	4b55      	ldr	r3, [pc, #340]	@ (80002f0 <main+0x160>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a54      	ldr	r2, [pc, #336]	@ (80002f0 <main+0x160>)
 800019e:	f043 0304 	orr.w	r3, r3, #4
 80001a2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= GPIODEN;
 80001a4:	4b52      	ldr	r3, [pc, #328]	@ (80002f0 <main+0x160>)
 80001a6:	699b      	ldr	r3, [r3, #24]
 80001a8:	4a51      	ldr	r2, [pc, #324]	@ (80002f0 <main+0x160>)
 80001aa:	f043 0320 	orr.w	r3, r3, #32
 80001ae:	6193      	str	r3, [r2, #24]

	// Output Port Configuration for D0,D1,D4 and D5 pins
	GPIOD->CRL &= ~(0xF<<0);
 80001b0:	4b50      	ldr	r3, [pc, #320]	@ (80002f4 <main+0x164>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a4f      	ldr	r2, [pc, #316]	@ (80002f4 <main+0x164>)
 80001b6:	f023 030f 	bic.w	r3, r3, #15
 80001ba:	6013      	str	r3, [r2, #0]
	GPIOD->CRL |= (0x2<<0); // 10: Output mode, max speed 2 MHz.
 80001bc:	4b4d      	ldr	r3, [pc, #308]	@ (80002f4 <main+0x164>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a4c      	ldr	r2, [pc, #304]	@ (80002f4 <main+0x164>)
 80001c2:	f043 0302 	orr.w	r3, r3, #2
 80001c6:	6013      	str	r3, [r2, #0]
	GPIOD->CRL &= ~(0xF<<4);
 80001c8:	4b4a      	ldr	r3, [pc, #296]	@ (80002f4 <main+0x164>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a49      	ldr	r2, [pc, #292]	@ (80002f4 <main+0x164>)
 80001ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80001d2:	6013      	str	r3, [r2, #0]
	GPIOD->CRL |= (0x2<<4); // 10: Output mode, max speed 2 MHz.
 80001d4:	4b47      	ldr	r3, [pc, #284]	@ (80002f4 <main+0x164>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a46      	ldr	r2, [pc, #280]	@ (80002f4 <main+0x164>)
 80001da:	f043 0320 	orr.w	r3, r3, #32
 80001de:	6013      	str	r3, [r2, #0]
	GPIOD->CRL &= ~(0xF<<16);
 80001e0:	4b44      	ldr	r3, [pc, #272]	@ (80002f4 <main+0x164>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a43      	ldr	r2, [pc, #268]	@ (80002f4 <main+0x164>)
 80001e6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80001ea:	6013      	str	r3, [r2, #0]
	GPIOD->CRL |= (0x2<<16); // 10: Output mode, max speed 2 MHz.
 80001ec:	4b41      	ldr	r3, [pc, #260]	@ (80002f4 <main+0x164>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a40      	ldr	r2, [pc, #256]	@ (80002f4 <main+0x164>)
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOD->CRL &= ~(0xF<<20);
 80001f8:	4b3e      	ldr	r3, [pc, #248]	@ (80002f4 <main+0x164>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a3d      	ldr	r2, [pc, #244]	@ (80002f4 <main+0x164>)
 80001fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOD->CRL |= (0x2<<20); // 10: Output mode, max speed 2 MHz.
 8000204:	4b3b      	ldr	r3, [pc, #236]	@ (80002f4 <main+0x164>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a3a      	ldr	r2, [pc, #232]	@ (80002f4 <main+0x164>)
 800020a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800020e:	6013      	str	r3, [r2, #0]

	// Configure Port A pin 3 as input
	GPIOA->CRL &= ~(0xF<<12);
 8000210:	4b39      	ldr	r3, [pc, #228]	@ (80002f8 <main+0x168>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a38      	ldr	r2, [pc, #224]	@ (80002f8 <main+0x168>)
 8000216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800021a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x2<<14);
 800021c:	4b36      	ldr	r3, [pc, #216]	@ (80002f8 <main+0x168>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a35      	ldr	r2, [pc, #212]	@ (80002f8 <main+0x168>)
 8000222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000226:	6013      	str	r3, [r2, #0]

	// Set Pin D0 HIGH
	GPIOD->ODR |= GPIOD0_HIGH;
 8000228:	4b32      	ldr	r3, [pc, #200]	@ (80002f4 <main+0x164>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a31      	ldr	r2, [pc, #196]	@ (80002f4 <main+0x164>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	60d3      	str	r3, [r2, #12]

	while(1){
	// Check the state of pin 3 of Port A
	if ((GPIOA->IDR & (0x1<<3)) == (0x1<<3)) {
 8000234:	4b30      	ldr	r3, [pc, #192]	@ (80002f8 <main+0x168>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	f003 0308 	and.w	r3, r3, #8
 800023c:	2b08      	cmp	r3, #8
 800023e:	d1f9      	bne.n	8000234 <main+0xa4>
		if ((GPIOA->ODR & (0x1<<0)) == (0x1<<0)){
 8000240:	4b2d      	ldr	r3, [pc, #180]	@ (80002f8 <main+0x168>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	2b01      	cmp	r3, #1
 800024a:	d10f      	bne.n	800026c <main+0xdc>
		GPIOD->ODR ^= LED0;
 800024c:	4b29      	ldr	r3, [pc, #164]	@ (80002f4 <main+0x164>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a28      	ldr	r2, [pc, #160]	@ (80002f4 <main+0x164>)
 8000252:	f083 0301 	eor.w	r3, r3, #1
 8000256:	60d3      	str	r3, [r2, #12]
		GPIOD->ODR ^= LED1;
 8000258:	4b26      	ldr	r3, [pc, #152]	@ (80002f4 <main+0x164>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a25      	ldr	r2, [pc, #148]	@ (80002f4 <main+0x164>)
 800025e:	f083 0302 	eor.w	r3, r3, #2
 8000262:	60d3      	str	r3, [r2, #12]
		delay(1454545);
 8000264:	4825      	ldr	r0, [pc, #148]	@ (80002fc <main+0x16c>)
 8000266:	f000 f84b 	bl	8000300 <delay>
 800026a:	e7e3      	b.n	8000234 <main+0xa4>
		}
		else if ((GPIOD->ODR & (0x1<<1)) == (0x1<<1)){
 800026c:	4b21      	ldr	r3, [pc, #132]	@ (80002f4 <main+0x164>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	f003 0302 	and.w	r3, r3, #2
 8000274:	2b02      	cmp	r3, #2
 8000276:	d10f      	bne.n	8000298 <main+0x108>
		GPIOD->ODR ^= LED1;
 8000278:	4b1e      	ldr	r3, [pc, #120]	@ (80002f4 <main+0x164>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a1d      	ldr	r2, [pc, #116]	@ (80002f4 <main+0x164>)
 800027e:	f083 0302 	eor.w	r3, r3, #2
 8000282:	60d3      	str	r3, [r2, #12]
		GPIOD->ODR ^= LED5;
 8000284:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <main+0x164>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a1a      	ldr	r2, [pc, #104]	@ (80002f4 <main+0x164>)
 800028a:	f083 0320 	eor.w	r3, r3, #32
 800028e:	60d3      	str	r3, [r2, #12]
		delay(1454545);
 8000290:	481a      	ldr	r0, [pc, #104]	@ (80002fc <main+0x16c>)
 8000292:	f000 f835 	bl	8000300 <delay>
 8000296:	e7cd      	b.n	8000234 <main+0xa4>
		}
		else if ((GPIOD->ODR & (0x1<<5)) == (0x1<<5)){
 8000298:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <main+0x164>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	f003 0320 	and.w	r3, r3, #32
 80002a0:	2b20      	cmp	r3, #32
 80002a2:	d10f      	bne.n	80002c4 <main+0x134>
		GPIOD->ODR ^= LED5;
 80002a4:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <main+0x164>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a12      	ldr	r2, [pc, #72]	@ (80002f4 <main+0x164>)
 80002aa:	f083 0320 	eor.w	r3, r3, #32
 80002ae:	60d3      	str	r3, [r2, #12]
		GPIOD->ODR ^= LED4;
 80002b0:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <main+0x164>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <main+0x164>)
 80002b6:	f083 0310 	eor.w	r3, r3, #16
 80002ba:	60d3      	str	r3, [r2, #12]
		delay(1454545);
 80002bc:	480f      	ldr	r0, [pc, #60]	@ (80002fc <main+0x16c>)
 80002be:	f000 f81f 	bl	8000300 <delay>
 80002c2:	e7b7      	b.n	8000234 <main+0xa4>
		}
		else if ((GPIOD->ODR & (0x1<<4)) == (0x1<<4)){
 80002c4:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <main+0x164>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	2b10      	cmp	r3, #16
 80002ce:	d1b1      	bne.n	8000234 <main+0xa4>
		GPIOD->ODR ^= LED4;
 80002d0:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <main+0x164>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a07      	ldr	r2, [pc, #28]	@ (80002f4 <main+0x164>)
 80002d6:	f083 0310 	eor.w	r3, r3, #16
 80002da:	60d3      	str	r3, [r2, #12]
		GPIOD->ODR ^= LED0;
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <main+0x164>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <main+0x164>)
 80002e2:	f083 0301 	eor.w	r3, r3, #1
 80002e6:	60d3      	str	r3, [r2, #12]
		delay(1454545);
 80002e8:	4804      	ldr	r0, [pc, #16]	@ (80002fc <main+0x16c>)
 80002ea:	f000 f809 	bl	8000300 <delay>
	if ((GPIOA->IDR & (0x1<<3)) == (0x1<<3)) {
 80002ee:	e7a1      	b.n	8000234 <main+0xa4>
 80002f0:	40021000 	.word	0x40021000
 80002f4:	40011400 	.word	0x40011400
 80002f8:	40010800 	.word	0x40010800
 80002fc:	001631d1 	.word	0x001631d1

08000300 <delay>:
	}
}
}

// Function to introduce a delay
void delay(uint32_t time) {
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	    while (time--);
 8000308:	bf00      	nop
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	1e5a      	subs	r2, r3, #1
 800030e:	607a      	str	r2, [r7, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1fa      	bne.n	800030a <delay+0xa>
	}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <initClockHSI>:

	// Wait for PLL to be the system clock
	while((RCC->CFGR & (0x3<<2)) != (0x2<<2));
}

void initClockHSI(void) {
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION; // Enable internal HSI (RC)
 8000324:	4b11      	ldr	r3, [pc, #68]	@ (800036c <initClockHSI+0x4c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a10      	ldr	r2, [pc, #64]	@ (800036c <initClockHSI+0x4c>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSIRDY) != RCC_CR_HSIRDY); // Wait for HSI to be ready
 8000330:	bf00      	nop
 8000332:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <initClockHSI+0x4c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	2b02      	cmp	r3, #2
 800033c:	d1f9      	bne.n	8000332 <initClockHSI+0x12>

		//RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR &= ~(RCC_CFGR_SW); // Clear SW bits
 800033e:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <initClockHSI+0x4c>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	4a0a      	ldr	r2, [pc, #40]	@ (800036c <initClockHSI+0x4c>)
 8000344:	f023 0303 	bic.w	r3, r3, #3
 8000348:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_HSI; // Set HSI as the system clock
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <initClockHSI+0x4c>)
 800034c:	4a07      	ldr	r2, [pc, #28]	@ (800036c <initClockHSI+0x4c>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	6053      	str	r3, [r2, #4]

    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Wait for HSI to be the system clock
 8000352:	bf00      	nop
 8000354:	4b05      	ldr	r3, [pc, #20]	@ (800036c <initClockHSI+0x4c>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	f003 030c 	and.w	r3, r3, #12
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1f9      	bne.n	8000354 <initClockHSI+0x34>
}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	@ (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff fef5 	bl	8000190 <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	2600      	movs	r6, #0
 80003c8:	4d0c      	ldr	r5, [pc, #48]	@ (80003fc <__libc_init_array+0x38>)
 80003ca:	4c0d      	ldr	r4, [pc, #52]	@ (8000400 <__libc_init_array+0x3c>)
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	f000 f81a 	bl	800040c <_init>
 80003d8:	2600      	movs	r6, #0
 80003da:	4d0a      	ldr	r5, [pc, #40]	@ (8000404 <__libc_init_array+0x40>)
 80003dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000408 <__libc_init_array+0x44>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
